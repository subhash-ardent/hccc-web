{
  "swagger": "2.0",
  "info": {
    "description": "This is the API Interface definition for HCCC'c Youth and Education Application",
    "version": "1.0.0",
    "title": "HCCC Youth and Education API",
    "contact": {
      "email": "ec_it@livermoretemple.org"
    }
  },
  "host": "livermoretemple.org",
  "basePath": "/yande/api",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/courses": {
      "get": {
        "summary": "Retrieves courses",
        "operationId": "getCourses",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "courseTags",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Tags to be used as filter - comma seperated list of tags"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CoursesList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a new course",
        "operationId": "addCourse",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/courses/{courseId}": {
      "get": {
        "summary": "Retrieves course by Id",
        "operationId": "getCourseById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "string",
            "description": "Id of the course to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates a course",
        "operationId": "updateCourse",
        "description": "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "string",
            "description": "Id of the course to be updated"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete course by Id",
        "operationId": "deleteCourseById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "type": "string",
            "description": "Id of the course to be deleted"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/teachers": {
      "get": {
        "summary": "Retrieves list of teachers",
        "operationId": "getTeachers",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeachersList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a new teacher",
        "operationId": "onboardTeacher",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Teacher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Teacher"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/teachers/{teacherId}": {
      "get": {
        "summary": "Retrieves teacher by Id",
        "operationId": "getTeacherById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "teacherId",
            "required": true,
            "type": "string",
            "description": "Id of the teacher to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Teacher"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates a teacher",
        "operationId": "updateTeacher",
        "description": "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "teacherId",
            "required": true,
            "type": "string",
            "description": "Id of the teacher to be updated"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Teacher"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete teacher by Id",
        "operationId": "deleteTeacherById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "teacherId",
            "required": true,
            "type": "string",
            "description": "Id of the teacher to be deleted"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/indemnityForms": {
      "get": {
        "summary": "Retrieves list of indemnity forms",
        "operationId": "getIndemnityForms",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndemnityFormsList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a new indemnity form",
        "operationId": "addIndemnityForm",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndemnityForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndemnityForm"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/indemnityForms/{indemnityFormId}": {
      "get": {
        "summary": "Retrieves indemnity form by Id",
        "operationId": "getIndemnityFormById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "indemnityFormId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity from to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndemnityForm"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates an indemnity form",
        "operationId": "updateIndemnityForm",
        "description": "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "indemnityFormId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity form to be updated"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndemnityForm"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete indemnity form by Id",
        "operationId": "deleteIndemnityFormrById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "indemnityFormId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity form to be deleted"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees": {
      "get": {
        "summary": "Retrieves Devotees",
        "operationId": "getDevotees",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "?include=familyMember will return devotee devotee information with family members details"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If a phone number is passed in query string, the results will be filtered by accounts mobile number"
          },
          {
            "name": "roleName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If a role name is passed in query string, the results will be filtered by roles"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DevoteesList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees/{devoteeId}": {
      "get": {
        "summary": "Gets devotee by Id",
        "operationId": "getDevotee",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "?include=familyMember will return devotee devotee information with family members details"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Devotee"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees/{devoteeId}/enrollments": {
      "get": {
        "summary": "Retrieves enrollments.",
        "description": " Only enrollments belonging to the requesting devotee account will be returned. User Account information is available in the header.",
        "operationId": "getEnrollments",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee account whose enrollments are to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnrollmentsList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a new enrollment",
        "operationId": "addEnrollment",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the account to be retrieved"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enrollment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Enrollment"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees/{devoteeId}/enrollments/{enrollmentId}": {
      "get": {
        "summary": "get enrollment by id",
        "operationId": "getEnrollment",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Enrollment"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates an enrollment",
        "operationId": "updateEnrollment",
        "description": "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enrollment"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete enrollment by Id",
        "operationId": "deleteEnrollmentById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be deleted"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees/{devoteeId}/enrollments/{enrollmentId}/indemnities": {
      "get": {
        "summary": "Retrieves indemnities",
        "description": "Only indemnities belonging to the requesting user account will be returned. User Account information is available in the header.",
        "operationId": "getIndemnities",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee account whose indemnities are to be retrieved"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndemnitiesList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a new indemnity",
        "operationId": "addIndemnity",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Indemnity"
            }
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Indemnity"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/devotees/{devoteeId}/enrollments/{enrollmentId}/indemnities/{indemnityId}": {
      "get": {
        "summary": "get indemnity by id",
        "operationId": "getIndemnity",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "indemnityId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity to be retrieved"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Indemnity"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Updates an indemnity",
        "operationId": "updateIndemnity",
        "description": "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "indemnityId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity to be retrieved"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Indemnity"
            }
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "403": {
            "$ref": "#/responses/403ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete indemnity by Id",
        "operationId": "deleteIndemnityById",
        "parameters": [
          {
            "$ref": "#/parameters/User-Name"
          },
          {
            "in": "path",
            "name": "devoteeId",
            "required": true,
            "type": "string",
            "description": "Id of the devotee"
          },
          {
            "in": "path",
            "name": "indemnityId",
            "required": true,
            "type": "string",
            "description": "Id of the indemnity to be deleted"
          },
          {
            "in": "path",
            "name": "enrollmentId",
            "required": true,
            "type": "string",
            "description": "Id of the enrollment to be retrieved"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "description": "Error Object",
      "properties": {
        "errorCode": {
          "description": "Unique Error Code that identifies the error",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Error Messages that describes the error",
          "type": "string"
        }
      }
    },
    "CoursesList": {
      "description": "This is the schema of response payload when a list of course information is requested",
      "properties": {
        "courses": {
          "type": "array",
          "description": "List of Courses",
          "items": {
            "$ref": "#/definitions/Course"
          }
        }
      }
    },
    "TeachersList": {
      "description": "This is the schema of response payload when a list of teacher information is requested",
      "properties": {
        "teachers": {
          "type": "array",
          "description": "List of Teachers",
          "items": {
            "$ref": "#/definitions/Teacher"
          }
        }
      }
    },
    "IndemnitiesList": {
      "description": "This is the schema of response payload when a list of indemnity information is requested",
      "properties": {
        "indemnities": {
          "type": "array",
          "description": "List of Indemnities",
          "items": {
            "$ref": "#/definitions/Indemnity"
          }
        }
      }
    },
    "DevoteesList": {
      "description": "This is the schema of response payload when an account's information is requested",
      "properties": {
        "devotees": {
          "type": "array",
          "description": "List of Devotee Objects",
          "items": {
            "$ref": "#/definitions/Devotee"
          }
        }
      }
    },
    "EnrollmentsList": {
      "description": "This is the schema of response payload when a list of indemnity information is requested",
      "properties": {
        "enrollments": {
          "type": "array",
          "description": "List of Enrollments",
          "items": {
            "$ref": "#/definitions/Enrollment"
          }
        }
      }
    },
    "IndemnityFormsList": {
      "description": "This is the schema of response payload when a list of indemnity forms is requested",
      "properties": {
        "indemnityForms": {
          "type": "array",
          "description": "List of Indemnity Forms",
          "items": {
            "$ref": "#/definitions/IndemnityForm"
          }
        }
      }
    },
    "Course": {
      "description": "Course Object",
      "properties": {
        "courseId": {
          "type": "string",
          "description": "Unique course id",
          "readOnly": true
        },
        "courseName": {
          "type": "string",
          "description": "Unique course id"
        },
        "ageRestrictions": {
          "type": "string",
          "description": "A String describing any age restrictions"
        },
        "courseImageURL": {
          "type": "string",
          "description": "URL of the course's image"
        },
        "courseRemarks": {
          "type": "string",
          "description": "Any additional notes or remarks about the course"
        },
        "courseTags": {
          "type": "string",
          "description": "List of tags associated with the course. comma seperated"
        },
        "isArchived": {
          "type": "boolean",
          "description": "Boolean field indicates if course is archived"
        },
        "isRegistrationOpen": {
          "type": "boolean",
          "description": "Boolean field indicates if registration is open"
        },
        "courseStartTime": {
          "type": "string",
          "description": "Course start time represented as a string in pacific time in the format hh:mm"
        },
        "courseEndTime": {
          "type": "string",
          "description": "Course end time represented as a string in pacific time in the format hh:mm"
        },
        "courseStartDate": {
          "type": "string",
          "description": "Course start date represented as a string in pacific time in the format yyyy-mm-dd"
        },
        "courseEndDate": {
          "type": "string",
          "description": "Course end date represented as a string in pacific time in the format yyyy-mm-dd"
        },
        "courseDays": {
          "type": "string",
          "description": "Course days or String describing the frequency/recurrence of the course"
        },
        "courseVenue": {
          "type": "string",
          "description": "Facility where the course will be taught"
        },
        "flyerURL": {
          "type": "string",
          "description": "URL of the course's flyer"
        },
        "slots": {
          "type": "integer",
          "description": "Class size or total number of slots in the course"
        },
        "teachers": {
          "description": "List of teachers of the course",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Teacher"
          }
        },
        "indemnityForms": {
          "description": "List of indemnityForms",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IndemnityForm"
          }
        },
        "transientTeacherIds": {
          "description": "List of teacher (or coordinator) ids of the course",
          "type": "array",
          "writeOnly": true,
          "items": {
            "type": "integer"
          }
        },
        "transientIndemnityFormIds": {
          "description": "List of indemnityForm ids",
          "type": "array",
          "writeOnly": true,
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Teacher": {
      "description": "Teacher Object",
      "properties": {
        "devotee": {
          "readOnly": true,
          "$ref": "#/definitions/Devotee"
        },
        "teacherId": {
          "type": "integer",
          "readOnly": true,
          "description": "Teacher Id"
        },
        "salutation": {
          "type": "string",
          "description": "Salutation or title. For e.g. Mrs, Dr, Shri, Pandit, etc."
        },
        "profilePictureURL": {
          "type": "string",
          "description": "URL of the teachers profile picture"
        },
        "skillSet": {
          "description": "Teacher's skill set. comma seperated",
          "type": "string"
        },
        "indemnitySigned": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher has signed an indemnity"
        },
        "backgroundVerified": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher's background check has been complete"
        },
        "identityVerified": {
          "type": "boolean",
          "description": "Boolean indicating if the teacher's identity verified"
        }
      }
    },
    "Indemnity": {
      "description": "Indemnity Object",
      "properties": {
        "indemnityId": {
          "type": "string",
          "description": "Unique identifier of the Indemnity.",
          "readOnly": true
        },
        "createdUser": {
          "$ref": "#/definitions/Devotee",
          "description": "Devotee who created the enrollment",
          "readOnly": true
        },
        "enrollment": {
          "$ref": "#/definitions/Enrollment",
          "description": "Enrollment to which this indemnity is associated to",
          "readOnly": true
        },
        "signedDate": {
          "type": "string",
          "description": "Datetime when the indemnity was signed in ISO 8612 format. For e.g. 2018-07-10T07:51:25+00:00"
        },
        "indemnityFormId": {
          "type": "string",
          "description": "Identifier of the Indemnity Form being signed.",
          "writeOnly": true
        },
        "indemnityForm": {
          "$ref": "#/definitions/IndemnityForm",
          "description": "Identifier of the Indemnity Form being signed.",
          "readOnly": true
        }
      }
    },
    "Devotee": {
      "description": "Devotee Account Object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Unique userName of the devotee"
        },
        "phoneResidence": {
          "type": "string",
          "description": "Devotee's primary phone number"
        },
        "firstName": {
          "type": "string",
          "description": "Unique userName of the devotee"
        },
        "lastName": {
          "type": "string",
          "description": "Unique userName of the devotee"
        },
        "email": {
          "type": "string",
          "description": "Email Id associated with the devotee's account"
        },
        "roles": {
          "description": "Roles associated to the devotee profile",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "familyMembers": {
          "description": "Family members of the devotee",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/FamilyMember"
          }
        }
      }
    },
    "Enrollment": {
      "description": "Enrollment Object",
      "properties": {
        "enrollmentId": {
          "type": "string",
          "description": "Unique enrollment id",
          "readOnly": true
        },
        "createdUser": {
          "$ref": "#/definitions/Devotee",
          "description": "Devotee who created the enrollment",
          "readOnly": true
        },
        "transientCourseId": {
          "type": "string",
          "writeOnly" : true,
          "description": "Identifier of the class being enrolled to"
        },
        "course": {
          "type": "string",
          "readOnly": true,
          "description": "Course Enrolled"
        },
        "transientParticipantUsername": {
          "type": "string",
          "writeOnly" : true,
          "description": "Identifier of the Participant, (if the devotee is the Participant)"
        },
        "transientGuardianUsername": {
          "type": "string",
          "writeOnly" : true,
          "description": "Identifier of the Guardian, (if the Devotee is the guardian)"
        },
        "transientParticipantFamilyMemberId": {
          "type": "string",
          "writeOnly" : true,
          "description": "Identifier of the Participant, (if a family member is the participant) "
        },
        "transientGuardianFamilyMemberId": {
          "type": "string",
          "writeOnly" : true,
          "description": "Identifier of the Guardian (if a family member is the guardian)"
        },
        "participantUsername": {
          "$ref": "#/definitions/Devotee",
          "readOnly" : true,
          "description": "Identifier of the Participant, (if the devotee is the Participant)"
        },
        "guardianUsername": {
          "$ref": "#/definitions/Devotee",
          "readOnly" : true,
          "description": "Identifier of the Guardian, (if the Devotee is the guardian)"
        },
        "participantFamilyMemberId": {
          "$ref": "#/definitions/FamilyMember",
          "readOnly" : true,
          "description": "Identifier of the Participant, (if a family member is the participant) "
        },
        "guardianFamilyMemberId": {
          "$ref": "#/definitions/FamilyMember",
          "readOnly" : true,
          "description": "Identifier of the Guardian (if a family member is the guardian)"
        },
        "isParticipantUnder18": {
          "type": "boolean",
          "description": "true if participant age is under 18, else false"
        },
        "emergencyContactNumber": {
          "type": "string",
          "description": "Emergency contact phone number"
        },
        "transientIndemnityIds": {
          "type": "array",
          "writeOnly" : true,
          "description": "List of Indemnity Ids signed in association with this enrollment",
          "items": {
            "type": "integer"
          }
        },
        "indemnities": {
          "type": "array",
          "readOnly": true,
          "description": "List of Indemnities signed in association with this enrollment",
          "items": {
            "$ref": "#/definitions/Indemnity"
          }
        }
      }
    },
    "IndemnityForm": {
      "description": "Indemnity Form Object",
      "properties": {
        "indemnityFormId": {
          "type": "string",
          "description": "Unique id of indemnity form",
          "readOnly": true
        },
        "indemnityFormTitle": {
          "type": "string",
          "description": "Title of the indemnity Form"
        },
        "indemnityFormDescription": {
          "type": "string",
          "description": "Description of the indemnity Form that explains the purpose and usage of the form"
        },
        "indemnityFormVersion": {
          "type": "string",
          "description": "Version of the indemnity Form"
        },
        "indemnityFormURL": {
          "type": "string",
          "description": "URL of the indemnity template"
        }
      }
    },
    "FamilyMember": {
      "description": "Devotee Object",
      "properties": {
        "familyMemberId": {
          "type": "string",
          "description": "Unique Identifier of the family member",
          "readOnly": true
        },
        "firstName": {
          "description": "First Name of Family Member",
          "type": "string"
        },
        "lastName": {
          "description": "First Name of Family Member",
          "type": "string"
        },
        "phoneResidence": {
          "description": "First Name of Family Member",
          "type": "string"
        },
        "email": {
          "description": "First Name of Family Member",
          "type": "string"
        }
      }
    },
    "Role": {
      "description": "Role Object",
      "properties": {
        "roleId": {
          "type": "number",
          "description": "Id of the role"
        },
        "roleName": {
          "type": "string",
          "description": "Name of the role"
        },
        "roleDescription": {
          "type": "string",
          "description": "Description of the role"
        }
      }
    }
  },
  "parameters": {
    "Content-Type": {
      "name": "Content-Type",
      "in": "header",
      "description": "The MediaType of the request content",
      "required": true,
      "type": "string",
      "default": "application/json"
    },
    "Accept": {
      "name": "Accept",
      "in": "header",
      "description": "The MediaType of the response content",
      "required": true,
      "type": "string",
      "default": "application/json"
    },
    "User-Name": {
      "name": "User-Name",
      "in": "header",
      "description": "Unique identifier of the devotee's account",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "400ErrorResponse": {
      "description": "Bad request - some of the input parameters are incorrect or invalid",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "403ErrorResponse": {
      "description": "Forbidden - the devotee does not have permissions to call this endpoint",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404ErrorResponse": {
      "description": "Resource Not Found",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500ErrorResponse": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  }
}

